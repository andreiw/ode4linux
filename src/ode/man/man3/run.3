.\"
.\" @OSF_FREE_COPYRIGHT@
.\" COPYRIGHT NOTICE
.\" Copyright (c) 1992, 1991, 1990  
.\" Open Software Foundation, Inc. 
.\"  
.\" Permission is hereby granted to use, copy, modify and freely distribute 
.\" the software in this file and its documentation for any purpose without 
.\" fee, provided that the above copyright notice appears in all copies and 
.\" that both the copyright notice and this permission notice appear in 
.\" supporting documentation.  Further, provided that the name of Open 
.\" Software Foundation, Inc. ("OSF") not be used in advertising or 
.\" publicity pertaining to distribution of the software without prior 
.\" written permission from OSF.  OSF makes no representations about the 
.\" suitability of this software for any purpose.  It is provided "as is" 
.\" without express or implied warranty. 
.\"  
.\" Copyright (c) 1992 Carnegie Mellon University 
.\" All Rights Reserved. 
.\"  
.\" Permission to use, copy, modify and distribute this software and its 
.\" documentation is hereby granted, provided that both the copyright 
.\" notice and this permission notice appear in all copies of the 
.\" software, derivative works or modified versions, and any portions 
.\" thereof, and that both notices appear in supporting documentation. 
.\"  
.\" CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
.\" CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR 
.\" ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE. 
.\"  
.\" Carnegie Mellon requests users of this software to return to 
.\"  
.\" Software Distribution Coordinator  or  Software_Distribution@CS.CMU.EDU 
.\" School of Computer Science 
.\" Carnegie Mellon University 
.\" Pittsburgh PA 15213-3890 
.\"  
.\" any improvements or extensions that they make and grant Carnegie Mellon 
.\" the rights to redistribute these changes. 
.\"
.\"
.\" HISTORY
.\" $Log: run.3,v $
.\" Revision 1.4.2.2  1992/12/02  20:51:06  damon
.\" 	ODE 2.2 CR 183. Added CMU notice
.\" 	[1992/12/02  20:47:31  damon]
.\"
.\" Revision 1.4  1991/12/05  21:16:48  devrcs
.\" 	Added _FREE_ to copyright marker
.\" 	[91/08/01  08:17:04  mckeen]
.\" 
.\" Revision 1.3  90/10/07  21:58:41  devrcs
.\" 	Added EndLog Marker.
.\" 	[90/09/29  14:16:18  gm]
.\" 
.\" Revision 1.2  90/08/25  12:23:22  devrcs
.\" 	Taken from old libcs man pages
.\" 	[90/08/14  11:21:36  randyb]
.\" 
.\" Revision 1.2  90/01/02  19:37:43  gm
.\" 	Fixes for first snapshot.
.\" 
.\" Revision 1.1  89/12/26  10:51:59  gm
.\" 	Current version from CMU.
.\" 	[89/12/21            gm]
.\" 
.\" 	Revised for 4.3.
.\" 	[86/11/13            andi]
.\" 
.\" 	Mentioned -1 return for vfork() failure.
.\" 	[82/07/15            naf]
.\" 
.\" 	Added setuid and setgid feature, so that run may be used
.\" 	by privileged programs (e.g. post) to execute programs
.\" 	which allow users to fork shells (e.g. text editors).
.\" 	[80/01/28            sas]
.\" 
.\" 	Changed fork() to vfork().  This wins speed if run (etc.) is called
.\" 	from inside a very large program.
.\" 	[80/01/21            sas]
.\" 
.\" 	Created.
.\" 	[79/12/05            sas]
.\" 
.\" $EndLog$
.TH RUN 3 7/15/82
.CM 3
.SH "NAME"
run, runv, runp, runvp \- execute process and wait for it
.SH "SYNOPSIS"
.B
int run (file,arg0,arg1,arg2,...,argn,0);
.br
.B
int runv (file,arglist);
.br
.B
int runp (file,arg0,arg1,arg2,...,argn,0);
.br
.B
int runvp (file,arglist);
.sp
.B
char *file,*arg1,*arg2,...,*argn,**arglist;
.SH "DESCRIPTION"
.I
Run
and
.I
runv
have argument lists identical to the corresponding
functions,
.IR execl (2)
and
.IR execp (2).
The run routines perform a
.IR vfork (2),
then:
.TP
In the new process:
.IR setgid (2)
and
.IR setuid (2)
are used to ensure that privileges unique to the parent do not
propagate to the child.
An
.I
execl
or
.I
execv
is then performed with the specified arguments.
The process returns
with a \-1 code if the
.I
exec
was not successful.
.TP
In the parent process:
the signals
.I
SIGQUIT
(see
.IR signal (2))
and
.I
SIGINT
are disabled, the process
.I
waits
(see
.IR wait (2))
until the newly forked process exits, the signals
are restored to their original status, and the
return status of the process is analyzed.
.i0
.DT
.PP
.I
Run
and
.I
runv
return \-1 if 
.IR vfork (2) 
or 
.IR exec(2) fail or the child was terminated
by a
.I
signal;
the
.I
exit
code of the process otherwise.
.sp
.I
Runp
and
.I
runvp
are identical to
.I
run
and
.I
runv,
but perform path searching for the process by using
.I
execlp
and
.I
execvp.
These routines use the PATH environment parameter
as a list of directory names separated by colons;
the executable file is sought in each directory
until it is found or all directories have been
searched.
If the file is not found, \-1 is returned.
.sp
The proper way to execute system programs is via
.I
runp
or
.I
runvp
for most purposes; for example, if you want to
move file "a" to "b", the best way to do this via
system programs is this:
.sp
.nf
.B	runp ("mv","mv","a","b",0);
.fi
.sp
Note that no directory name is needed along with the
name of the file (e.g.
.I /bin/mv 
is not necessary),
and that the program name should be both
.I
file
and
.I
arg0.
This call is similar to:
.nf
	system ("mv a b");
.fi
but is much faster to execute.
.sp
The use of
.I
setgid
and
.I
setuid
means that, if the parent process gained privileges through the
use of special file mode bits (see 
.IR chmod (2)),
the child process
will not inherit these privileges.
This makes
.I
run
"safe" for system programs which require special privileges, and
usually has no effect on user programs.
.SH "ENVIRONMENT"
The
.B
PATH
environment parameter is used to find executable files in
.I
runp
and
.I
runvp.
If this parameter is not present, then the default value
.I
:/usr/cs/bin:/bin:/usr/bin
is used.
.SH "SEE ALSO"
.IR exec (2), 
.IR vfork (2), 
.IR signal (2), 
.IR system (3), 
.IR searchp (3)
.SH "DIAGNOSTICS"
These routines return \-1 if any error occurs in executing
the desired program.
If the program is executed successfully,
convention dictates that it should return 0 on normal
completion and non-zero (1, 2, etc.) if any error is
encountered.
.SH "BUGS"
The searching rule used by
.I
execlp
and
.I
execvp
is not the same as the rule used by
.IR searchp .
See the comments in
.IR searchp (3)
for more detailed information.

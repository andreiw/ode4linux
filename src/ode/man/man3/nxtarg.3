.\"
.\" @OSF_FREE_COPYRIGHT@
.\" COPYRIGHT NOTICE
.\" Copyright (c) 1992, 1991, 1990  
.\" Open Software Foundation, Inc. 
.\"  
.\" Permission is hereby granted to use, copy, modify and freely distribute 
.\" the software in this file and its documentation for any purpose without 
.\" fee, provided that the above copyright notice appears in all copies and 
.\" that both the copyright notice and this permission notice appear in 
.\" supporting documentation.  Further, provided that the name of Open 
.\" Software Foundation, Inc. ("OSF") not be used in advertising or 
.\" publicity pertaining to distribution of the software without prior 
.\" written permission from OSF.  OSF makes no representations about the 
.\" suitability of this software for any purpose.  It is provided "as is" 
.\" without express or implied warranty. 
.\"  
.\" Copyright (c) 1992 Carnegie Mellon University 
.\" All Rights Reserved. 
.\"  
.\" Permission to use, copy, modify and distribute this software and its 
.\" documentation is hereby granted, provided that both the copyright 
.\" notice and this permission notice appear in all copies of the 
.\" software, derivative works or modified versions, and any portions 
.\" thereof, and that both notices appear in supporting documentation. 
.\"  
.\" CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
.\" CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR 
.\" ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE. 
.\"  
.\" Carnegie Mellon requests users of this software to return to 
.\"  
.\" Software Distribution Coordinator  or  Software_Distribution@CS.CMU.EDU 
.\" School of Computer Science 
.\" Carnegie Mellon University 
.\" Pittsburgh PA 15213-3890 
.\"  
.\" any improvements or extensions that they make and grant Carnegie Mellon 
.\" the rights to redistribute these changes. 
.\"
.\"
.\" HISTORY
.\" $Log: nxtarg.3,v $
.\" Revision 1.4.2.2  1992/12/02  20:50:51  damon
.\" 	ODE 2.2 CR 183. Added CMU notice
.\" 	[1992/12/02  20:47:25  damon]
.\"
.\" Revision 1.4  1991/12/05  21:16:33  devrcs
.\" 	Added _FREE_ to copyright marker
.\" 	[91/08/01  08:16:37  mckeen]
.\" 
.\" Revision 1.3  90/10/07  21:58:15  devrcs
.\" 	Added EndLog Marker.
.\" 	[90/09/29  14:15:28  gm]
.\" 
.\" Revision 1.2  90/08/25  12:23:01  devrcs
.\" 	Taken from old libcs man pages
.\" 	[90/08/14  11:21:17  randyb]
.\" 
.\" Revision 1.2  90/01/02  19:37:34  gm
.\" 	Fixes for first snapshot.
.\" 
.\" Revision 1.1  89/12/26  10:51:21  gm
.\" 	Current version from CMU.
.\" 	[89/12/21            gm]
.\" 
.\" 	Revised for 4.3.
.\" 	[86/11/13            andi]
.\" 
.\" 	Updated for 4.2BSD.
.\" 	[86/05/31            ern]
.\" 
.\" 	Created.
.\" 	[79/12/05            sas]
.\" 
.\" $EndLog$
.TH NXTARG 3 5/31/86
.CM 4
.SH NAME
nxtarg \- parse arguments from a string
.SH SYNOPSIS
.B 
extern char _argbreak;
.sp
.B 
char *nxtarg (p,brk);
.br
.B
char **p,*brk;
.SH DESCRIPTION
.I 
Nxtarg
is used to parse a string, picking off one argument
with each call of
.I 
nxtarg.
The arguments are separated by some special "break"
characters, and may additionally be surrounded by
leading and trailing blanks and tabs.

When you have a string which you wish to parse, you should
declare a pointer and point to the start of the string:
.nf

.RS
.ta \w'char string[100];        'u
char string[100];	/* the arg list */
char *pointer;	/* a pointer */
char *argument;	/* one argument */
.li
...
pointer = string;	/* start of arg list */
.DT
.RE
.fi

Then, each call to
.I 
nxtarg
will fetch the next argument:

.RS
argument = nxtarg (&pointer,"delimiters");
.RE

Each call to 
.I nxtarg 
will space the pointer up to one of the
delimiters or the end of the string, whichever comes first.
Then, the string will be chopped into two pieces: the part
containing the argument just parsed, and the rest of the string.
The address of the first part will be returned; the pointer
will be left pointing to the second part, all ready for the
next call to 
.IR nxtarg .
Note that the pointer must not be in a register, since it
is passed by address.

The delimiter character (or null character at the end of the string)
encountered is placed into the external variable called,
.I 
_argbreak.
You may look at this value to see what delimiter was encountered.
If no delimiters were encountered before the end of the string,
then the null character will be placed into
.I 
_argbreak.

If
.I 
brk,
the list of break characters, is 0, then the space character will
be used as the only delimiter.
.SH "SEE ALSO"
.IR scanf (3), 
.IR boolarg (3), 
.IR intarg (3), 
.IR stabarg (3), 
.IR strarg (3), 
etc.
.SH DIAGNOSTICS
If the argument points to the null string,
or the end of the string is reached,
then a pointer to the null string will be returned.
At the
end of the string, 
.IR nxtarg () 
may be repeated any number of
times -- it will continue to leave the pointer unchanged,
and return a pointer to the null string.

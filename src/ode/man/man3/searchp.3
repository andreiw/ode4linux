.\"
.\" @OSF_FREE_COPYRIGHT@
.\" COPYRIGHT NOTICE
.\" Copyright (c) 1992, 1991, 1990  
.\" Open Software Foundation, Inc. 
.\"  
.\" Permission is hereby granted to use, copy, modify and freely distribute 
.\" the software in this file and its documentation for any purpose without 
.\" fee, provided that the above copyright notice appears in all copies and 
.\" that both the copyright notice and this permission notice appear in 
.\" supporting documentation.  Further, provided that the name of Open 
.\" Software Foundation, Inc. ("OSF") not be used in advertising or 
.\" publicity pertaining to distribution of the software without prior 
.\" written permission from OSF.  OSF makes no representations about the 
.\" suitability of this software for any purpose.  It is provided "as is" 
.\" without express or implied warranty. 
.\"  
.\" Copyright (c) 1992 Carnegie Mellon University 
.\" All Rights Reserved. 
.\"  
.\" Permission to use, copy, modify and distribute this software and its 
.\" documentation is hereby granted, provided that both the copyright 
.\" notice and this permission notice appear in all copies of the 
.\" software, derivative works or modified versions, and any portions 
.\" thereof, and that both notices appear in supporting documentation. 
.\"  
.\" CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
.\" CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR 
.\" ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE. 
.\"  
.\" Carnegie Mellon requests users of this software to return to 
.\"  
.\" Software Distribution Coordinator  or  Software_Distribution@CS.CMU.EDU 
.\" School of Computer Science 
.\" Carnegie Mellon University 
.\" Pittsburgh PA 15213-3890 
.\"  
.\" any improvements or extensions that they make and grant Carnegie Mellon 
.\" the rights to redistribute these changes. 
.\"
.\"
.\" HISTORY
.\" $Log: searchp.3,v $
.\" Revision 1.4.2.2  1992/12/02  20:51:10  damon
.\" 	ODE 2.2 CR 183. Added CMU notice
.\" 	[1992/12/02  20:47:33  damon]
.\"
.\" Revision 1.4  1991/12/05  21:16:56  devrcs
.\" 	Added _FREE_ to copyright marker
.\" 	[91/08/01  08:17:15  mckeen]
.\" 
.\" Revision 1.3  90/10/07  21:58:50  devrcs
.\" 	Added EndLog Marker.
.\" 	[90/09/29  14:16:31  gm]
.\" 
.\" Revision 1.2  90/08/25  12:23:29  devrcs
.\" 	Taken from old libcs man pages
.\" 	[90/08/14  11:21:47  randyb]
.\" 
.\" Revision 1.2  90/01/02  19:37:45  gm
.\" 	Fixes for first snapshot.
.\" 
.\" Revision 1.1  89/12/26  10:52:09  gm
.\" 	Current version from CMU.
.\" 	[89/12/21            gm]
.\" 
.\" 	Revised for 4.3.
.\" 	[86/11/13            andi]
.\" 
.\" 	Created.
.\" 	[79/12/05            sas]
.\" 
.\" $EndLog$
.TH SEARCHP 3 12/5/79
.CM 1
.SH "NAME"
searchp \- search for file using searchlist
.SH "SYNOPSIS"
.B
int searchp (searchlist,filename,buffer,function);
.br
.B
char *searchlist,*filename,*buffer;
.br
.B
int (*function)();
.SH "DESCRIPTION"
.I
Searchp
looks for an acceptable filename by concatenating
a name onto each directory name within a given 
.IR searchlist .
.sp
.I
Searchlist
is a list of directory names, separated by colons (:).
.I
Searchp
will parse these names, prepending each in turn to
.I
filename,
the name of the file being sought.
The resulting pathname
is passed as an argument to
.I
function,
a function provided by the user.
This function will receive one parameter -- the pathname --
and must return an integer telling whether this filename
is acceptable or not.
If a non-zero value is returned, then the
search continues with the next directory name from
.I
searchlist.
If the value 0 is returned, then searching stops.
In this case, the full filename is copied into the string
.I
buffer,
and
.I
searchp
returns 0.
.sp
If all the directories are unsuccessfully searched, then
.I
searchp
returns the value -1.
.sp
If
.I
filename
begins with a slash, it is assumed to be an absolute pathname
and
.I
searchlist
is not used.
.SH "SEE ALSO"
.IR openp (3), 
.IR fopenp (3), 
.IR wantread (3), 
.IR wantwrite (3), 
.IR fwantread (3), 
.IR fwantwrite (3),
.IR execlp (3), 
.IR execvp (3), 
.IR runp (3), 
.IR runvp (3)
.SH "DIAGNOSTICS"
\-1 is returned if no filename is satisfactory; 0 otherwise.
.SH "BUGS"
UNIX from Bell Labs uses three different searching algorithms
in three different contexts.
In the SHELL, executable programs
are sought, but are considered absolute pathnames if they
.I
contain
a slash, even if it is not the first character (bogus, in my
opinion -- sas).
The routines 
.I execvp 
and 
.I execlp 
use the same rule,
but also accept the minus sign (\-) as a separator in the pathlist.
The C compiler, in searching for macro files, uses the rule of
.I
searchp
-- a filename is only absolute if it
.I
begins
with a slash.
.sp
Users normally do not need to use
.I
searchp;
there are other, higher-level routines
.RI ( runp ,
.IR runvp ,
.IR openp ,
.IR fopenp )
which should normally be used.
There are, however,
occasions in which such routines are not powerful enough;
then,
.I
searchp
is appropriate.
